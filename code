from math import pi, e
import numpy as np
import matplotlib.pyplot as plt
def Semi_espaco(S1,E1,p1,n1,r0=1):
   """This function uses soils elastic parameters to return dynamic impedances in order to obtain
   steady state displacements by Wolf(1994). Respectively, S1=soil number,E1=elasticity modulus,
   p1=soils density, n1=Poisson ratio, and additionaly you may determine the circular foundations ray"""
   G1=E1/2/(1+n1)
   A0=pi*r0**2
   Se=[]
   if n1<=1/3:
       vp1=(E1/(1-n1)/(1-2*n1)/(1+n1)/p1)**0.5
   elif 1/3<n1<0.5:
        vp1=2*(G1/p1)**0.5
   else:
       print("Please type a Poissons ratio of an elastic soil")
       return False
   Z0=pi/4*(1-n1)*(vp1/(2*(G1/p1)**0.5))**2
   K1=p1*vp1**2*A0/Z0
   C1=p1*vp1*A0
   for l in range (1000):
      w=0.1*l
      Se.append(1/(complex(K1,w*C1)))
   return Se

def Dinamica_estrato(Sc,Ec,pc,nc,hc=10,r0=1,prof=1):
    """This function evaluates dynamic impedance of an embedded foundation on a soil layer over a halfspace (1994);
    respectively Scsoil number, Ec=elasticity modulus, pc=soils density
    nc=Poisson ratio and additionaly you may determine soil layer thickness,circular foundations ray and embedment"""
    if prof>=hc:
        print("Please dont put embedment values supeerior to the soils thickness. It may lead to false results")
        return False
    else:
        Sc=[]
        Gc=Ec/2/(1+nc)
        Kc=2*Gc*r0/(1-nc)
        soma1=0
        soma2=0
        if nc<=1/3:
           vpc=(Ec/(1-nc)/(1-2*nc)/(1+nc)/pc)**0.5
        elif 1/3<nc<0.5:
           vpc=2*(Gc/pc)**0.5 
        else:
           print("Please type a Poissons ratio of an elastic soil")
           return False
        Z0c=pi/4*(1-nc)*(vpc/(2*(Gc/pc)**0.5))**2
        r1=(Z0c+hc)*r0/Z0c
        T1=2*(hc-prof)/vpc
        T2=2*(hc+prof)/vpc
        k1=2*(hc-prof)/Z0c
        k2=2*(hc+prof)/Z0c
        for l in range (1000):
          w=0.1*l
          for j in range (100):
               soma1+=((-1)**j)*e**(complex(0,j*w*T1))/(1+j*k1)
               soma2+=((-1)**j)*e**(complex(0,j*w*T2))/(1+j*k2)
          S1=Kc*(complex(1,w*T1/k1))/(1+2*(soma1))
          S2=Kc*(complex(1,w*T2/k2))/(1+2*(soma2))
          S= (1/S1+1/S2)
          Sc.append(S)
        return (Sc,r1)


def Dinamica_Wolf (nsolos,Forca, prof=1,hfundacao=1,r0=1,dfundacao=2500):
    """This function gathers different soil layers dynamic impedances to an angular frequency range and returns the medium 
    steady state displacements to this range"""
    eixoy=[]
    eixox=[]
    Smatriz=[]
    for x in range (1000):
       Smatriz.append(0)
    r1=1
    m=hfundacao*r0**2*pi*dfundacao
    if nsolos[0][3]>1/3:
      m+=2.3*(nsolos[0][3]-1/3)*(nsolos[0][2])*pi*r0**3
    for solo in range (len(nsolos)):
      if solo==len(nsolos)-1:
         Stemp=np.array(Semi_espaco(nsolos[solo][0],nsolos[solo][1],nsolos[solo][2],nsolos[solo][3],r1))
      elif solo==0:
         Stemp=np.array(Dinamica_estrato(nsolos[solo][0],nsolos[solo][1],nsolos[solo][2],nsolos[solo][3],nsolos[solo][4],nsolos[solo][5],nsolos[solo][6]))[0]
         r1=Dinamica_estrato(nsolos[solo][0],nsolos[solo][1],nsolos[solo][2],nsolos[solo][3],nsolos[solo][4],nsolos[solo][5],nsolos[solo][6])[1]
      else:
         Stemp=np.array(Dinamica_estrato(nsolos[solo][0],nsolos[solo][1],nsolos[solo][2],nsolos[solo][3],nsolos[solo][4],r1,nsolos[solo][6]))[0]
         r1=Dinamica_estrato(nsolos[solo][0],nsolos[solo][1],nsolos[solo][2],nsolos[solo][3],nsolos[solo][4],r1,nsolos[solo][6])[1]
      for i in range (1000):
         Smatriz[i]+=Stemp[i]
    for i in range (len(Smatriz)):
      w=0.1*i
      eixox.append(w)
      d1=Forca/((1/Smatriz[i])-m*w**2)
      d2=(d1.real**2+d1.imag**2)**0.5
      eixoy.append(d2)  
    plt.plot(eixox,eixoy)
    plt.ylabel("steady state displacement")
    plt.xlabel("angular frequency")
    plt.show()
print(Dinamica_Wolf([(1,500000,1800,0.49,1.0001,1,1),(2,1000000,1800,0.49,1,0,0),(3,1500000,1800,0.3,4,0,0),(4,2000000,1800,0.3)],100000))
